--[[ Slendytubbies Vs Redux
Discord https://discord.gg/EhDUagAhCE --]]
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local TitleBar = Instance.new("TextLabel")
local TabContainer = Instance.new("ScrollingFrame")
local AntiSlipperyTab = Instance.new("TextButton")
local CreditsTab = Instance.new("TextButton")
local TabIndicator = Instance.new("Frame")
local ContentFrame = Instance.new("Frame")
local CloseButton = Instance.new("TextButton")
local CreditsFrame = Instance.new("Frame")
local CreditsLabel = Instance.new("TextLabel")
local CopyDiscordLinkButton = Instance.new("TextButton")
local InfiniteYieldButton = Instance.new("TextButton")
local AutofarmCustardsButton = Instance.new("TextButton")
local ToggleVisibilityButton = Instance.new("TextButton")
local CustardEspButton = Instance.new("TextButton")
local HalloweenTab = Instance.new("TextButton")
local HalloweenFrame = Instance.new("Frame")
local AutoGetHalloweenHats = Instance.new("TextButton")
local OtherTab = Instance.new("TextButton")
local OtherFrame = Instance.new("Frame")
local BlackListButton = Instance.new("TextButton")
local Players = game:GetService("Players")
local GetHallowHatButton = Instance.new("TextButton")
local TeleportToLobbyButton = Instance.new("TextButton")
local TeleportToCameraButton = Instance.new("TextButton")
local ESPPlayersButton = Instance.new("TextButton")
local MiscTab = Instance.new("TextButton")
local MiscFrame = Instance.new("Frame")
local RemoveLasersButton = Instance.new("TextButton")
local BeatAllMapsButton = Instance.new("TextButton")
local EscapeTrainingMazeButton = Instance.new("TextButton")
local DexExplorerButton = Instance.new("TextButton")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer

ScreenGui.Name = "AntiSlipperyUI"
ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
MainFrame.Size = UDim2.new(0, 300, 0, 200)
MainFrame.Active = true
MainFrame.Draggable = true 

TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.Font = Enum.Font.SourceSansBold
TitleBar.Text = "Ocfi Menu"
TitleBar.TextColor3 = Color3.new(1, 1, 1)
TitleBar.TextSize = 16
TitleBar.TextXAlignment = Enum.TextXAlignment.Center

CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -30, 0, 0)
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.new(1, 1, 1)
CloseButton.TextSize = 16
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

TabContainer.Name = "TabContainer"
TabContainer.Parent = MainFrame
TabContainer.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TabContainer.Position = UDim2.new(0, 0, 0, 30)
TabContainer.Size = UDim2.new(0, 100, 1, -30)
TabContainer.CanvasSize = UDim2.new(0, 0, 5.5, 0)
TabContainer.ScrollBarThickness = 0

AntiSlipperyTab.Name = "AntiSlipperyTab"
AntiSlipperyTab.Parent = TabContainer
AntiSlipperyTab.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AntiSlipperyTab.Position = UDim2.new(0, 0, 0, 0)
AntiSlipperyTab.Size = UDim2.new(1, 0, 0, 30)
AntiSlipperyTab.Font = Enum.Font.SourceSansBold
AntiSlipperyTab.Text = "Main"
AntiSlipperyTab.TextColor3 = Color3.new(1, 1, 1)
AntiSlipperyTab.TextSize = 16

CreditsTab.Name = "CreditsTab"
CreditsTab.Parent = TabContainer
CreditsTab.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
CreditsTab.Position = UDim2.new(0, 0, 0, 30)
CreditsTab.Size = UDim2.new(1, 0, 0, 30)
CreditsTab.Font = Enum.Font.SourceSansBold
CreditsTab.Text = "Credits"
CreditsTab.TextColor3 = Color3.new(1, 1, 1)
CreditsTab.TextSize = 16

HalloweenTab.Name = "HalloweenTab"
HalloweenTab.Parent = TabContainer
HalloweenTab.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
HalloweenTab.Position = UDim2.new(0, 0, 0, 60)
HalloweenTab.Size = UDim2.new(1, 0, 0, 30)
HalloweenTab.Font = Enum.Font.SourceSansBold
HalloweenTab.Text = "Event"
HalloweenTab.TextWrapped = true
HalloweenTab.TextColor3 = Color3.new(1, 1, 1)
HalloweenTab.TextSize = 16

OtherTab.Name = "OtherTab"
OtherTab.Parent = TabContainer
OtherTab.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
OtherTab.Position = UDim2.new(0, 0, 0, 91)
OtherTab.Size = UDim2.new(1, 0, 0, 30)
OtherTab.Font = Enum.Font.SourceSansBold
OtherTab.Text = "More"
OtherTab.TextWrapped = true
OtherTab.TextColor3 = Color3.new(1, 1, 1)
OtherTab.TextSize = 16

MiscTab.Name = "MiscTab"
MiscTab.Parent = TabContainer
MiscTab.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MiscTab.Position = UDim2.new(0, 0, 0, 121)
MiscTab.Size = UDim2.new(1, 0, 0, 30)
MiscTab.Font = Enum.Font.SourceSansBold
MiscTab.Text = "Misc"
MiscTab.TextWrapped = true
MiscTab.TextColor3 = Color3.new(1, 1, 1)
MiscTab.TextSize = 16

TabIndicator.Name = "TabIndicator"
TabIndicator.Parent = TabContainer
TabIndicator.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
TabIndicator.BorderSizePixel = 0
TabIndicator.Position = UDim2.new(0, 0, 0, 0)
TabIndicator.Size = UDim2.new(1, 0, 0, 4)

ContentFrame.Name = "ContentFrame"
ContentFrame.Parent = MainFrame
ContentFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
ContentFrame.Position = UDim2.new(0, 100, 0, 30)
ContentFrame.Size = UDim2.new(1, -100, 1, -30)

-- UI Button setup for AutoGetHalloweenHats
AutoGetHalloweenHats.Name = "AutoGetHalloweenHats"
AutoGetHalloweenHats.Parent = HalloweenFrame
AutoGetHalloweenHats.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AutoGetHalloweenHats.Position = UDim2.new(0.5, -100, 0.1, -15)
AutoGetHalloweenHats.Size = UDim2.new(0, 200, 0, 30)
AutoGetHalloweenHats.Font = Enum.Font.SourceSansBold
AutoGetHalloweenHats.Text = "Auto Collect Hat Event: OFF"
AutoGetHalloweenHats.TextWrapped = true
AutoGetHalloweenHats.TextColor3 = Color3.new(1, 1, 1)
AutoGetHalloweenHats.TextSize = 19.9

-- Auto collect state
local AutoGetEnabled = false
local expectedCFrame = CFrame.new(-360, 0, 725, 1, 0, 0, 0, 1, 0, 0, 0, 1)

-- Function to check hatDropper position
local function checkHatDropperPosition()
    while AutoGetEnabled do
        local hatDropper = workspace:FindFirstChild("hatDropper")

        if hatDropper and hatDropper:IsA("BasePart") then
            -- Check if the CFrame has changed from the expected value
            if hatDropper.CFrame ~= expectedCFrame then
                -- Fire the server event
local args = {
    [1] = "Player",
    [2] = "CustardFacility"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

                -- Wait for 3 seconds
                wait(3)

                -- Teleport to the hatDropper's position
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = hatDropper.CFrame
                end
            end
        end

        -- Check every second while enabled
        wait(1)
    end
end

-- Toggle AutoGet functionality when button is clicked
AutoGetHalloweenHats.MouseButton1Click:Connect(function()
    AutoGetEnabled = not AutoGetEnabled
    if AutoGetEnabled then
        AutoGetHalloweenHats.Text = "Auto Collect Hat Event: ON"
        spawn(checkHatDropperPosition) -- Run the function in a new thread
    else
        AutoGetHalloweenHats.Text = "Auto Collect Hat Event: OFF"
    end
end)

local LocalPlayer = Players.LocalPlayer
local BlackListEnabled = false

-- Blacklist of users to check
local blacklist = {
    "2cola1",
    "Splatoof",
    "harveythecreatorr",
    "ChairmanOfChairs",
    "Frostholl",
    "kaileyy_09",
    "MisterAwake",
    "texticks",
    "sti3ky",
    "DeerWare",
    "Faz_Blocks",
    "MythicalApplehead",
    "Sn0w_Shark",
    "telebama",
    "sockmonkiie",
    "tweetroblox123123",
    "tomaan",
    "joaquinmaximus"
}

-- Function to check for blacklisted users
local function checkForBlacklistedPlayers()
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if table.find(blacklist, otherPlayer.Name) then
            LocalPlayer:Kick("You have been kicked because admin " .. otherPlayer.Name .. " has joined. \n Join A Different Server \n or wait for the admin to leave \n This Is Made To Prevent Admins Banning You.")
            return -- End the function after kicking
        end
    end
end

-- Function that runs the blacklist check loop
local function applyBlackList()
    while BlackListEnabled do
        checkForBlacklistedPlayers()
        wait(0.1) -- Wait 0.1 seconds before the next check
    end
end

-- Start the blacklist check automatically or however you prefer
BlackListEnabled = true -- Set this to true to start the check
spawn(applyBlackList) -- Start checking the blacklist

GetHallowHatButton.Name = "GetHallowHatButton"
GetHallowHatButton.Parent = HalloweenFrame
GetHallowHatButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
GetHallowHatButton.Position = UDim2.new(0.5, -100, 0.3, -15)
GetHallowHatButton.Size = UDim2.new(0, 200, 0, 30)
GetHallowHatButton.Font = Enum.Font.SourceSansBold
GetHallowHatButton.Text = "Get Hallow Party Hat"
GetHallowHatButton.TextWrapped = true
GetHallowHatButton.TextColor3 = Color3.new(1, 1, 1)
GetHallowHatButton.TextSize = 25

GetHallowHatButton.MouseButton1Click:Connect(function()
local args = {
    [1] = "hat_partyhalloween",
    [2] = "buy",
    [3] = "hat"
}

game:GetService("Players").LocalPlayer.PlayerGui.equipableCustomization.HatPurchaseMain.BuyOrEquip:FireServer(unpack(args))
end)

TeleportToLobbyButton.Name = "TeleportToLobbyButton"
TeleportToLobbyButton.Parent = OtherFrame
TeleportToLobbyButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TeleportToLobbyButton.Position = UDim2.new(0.5, -100, 0.1, -15)
TeleportToLobbyButton.Size = UDim2.new(0, 200, 0, 30)
TeleportToLobbyButton.Font = Enum.Font.SourceSansBold
TeleportToLobbyButton.Text = "Tp To Lobby [Risk Ban]"
TeleportToLobbyButton.TextWrapped = true
TeleportToLobbyButton.TextColor3 = Color3.new(1, 1, 1)
TeleportToLobbyButton.TextSize = 23

TeleportToLobbyButton.MouseButton1Click:Connect(function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1.44474149, 0.215728551, 704.945923, 1, 0, 0, 0, 1, 0, 0, 0, 1) 
end)

TeleportToCameraButton.Name = "TeleportToCameraButton"
TeleportToCameraButton.Parent = OtherFrame
TeleportToCameraButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TeleportToCameraButton.Position = UDim2.new(0.5, -100, 0.3, -15)
TeleportToCameraButton.Size = UDim2.new(0, 200, 0, 30)
TeleportToCameraButton.Font = Enum.Font.SourceSansBold
TeleportToCameraButton.Text = "Cover Lobby Camera [Risk Ban]"
TeleportToCameraButton.TextWrapped = true
TeleportToCameraButton.TextColor3 = Color3.new(1, 1, 1)
TeleportToCameraButton.TextSize = 16


-- Function to teleport and place the player on a part
local function teleportAndCreatePlatform()
    -- Get the Camera_Main part
    local cameraPart = workspace:WaitForChild("A_Title"):WaitForChild("box"):WaitForChild("Camera_Main")

    if cameraPart then
        -- Get the player's character
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Wait for the character's HumanoidRootPart to be loaded
        local rootPart = character:WaitForChild("HumanoidRootPart")

        -- Move forward by 3 units from the Camera_Main part's current CFrame
        local offset = cameraPart.CFrame.LookVector * 3 -- Adjust '3' to move more or less forward
        local targetCFrame = cameraPart.CFrame + offset

        -- Create a part (platform) for the player to stand on
        local platform = Instance.new("Part")
        platform.Size = Vector3.new(6, 1, 6) -- Size of the platform
        platform.CFrame = targetCFrame * CFrame.new(0, -3, 0) -- Position the platform under the player's feet
        platform.Anchored = true
        platform.Parent = workspace
        platform.Name = "TeleportPlatform"
        platform.Color = Color3.fromRGB(150, 150, 150) -- Set color for visibility

        -- Teleport the character to the platform
        rootPart.CFrame = targetCFrame + Vector3.new(0, 3.5, 0) -- Move the character just above the platform
    else
        warn("Camera_Main part not found inside A_Title/box.")
    end
end

-- Connect the button to the teleportAndCreatePlatform function
TeleportToCameraButton.MouseButton1Click:Connect(teleportAndCreatePlatform)

InfiniteYieldButton.Name = "InfiniteYieldButton"
InfiniteYieldButton.Parent = MiscFrame
InfiniteYieldButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
InfiniteYieldButton.Position = UDim2.new(0.5, -100, 0.1, -15)
InfiniteYieldButton.Size = UDim2.new(0, 200, 0, 30)
InfiniteYieldButton.Font = Enum.Font.SourceSansBold
InfiniteYieldButton.Text = "Infinite Yield"
InfiniteYieldButton.TextColor3 = Color3.new(1, 1, 1)
InfiniteYieldButton.TextSize = 25

InfiniteYieldButton.MouseButton1Click:Connect(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end)

DexExplorerButton.Name = "DexExplorerButton"
DexExplorerButton.Parent = MiscFrame
DexExplorerButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
DexExplorerButton.Position = UDim2.new(0.5, -100, 0.3, -15)
DexExplorerButton.Size = UDim2.new(0, 200, 0, 30)
DexExplorerButton.Font = Enum.Font.SourceSansBold
DexExplorerButton.Text = "Dex Explorer"
DexExplorerButton.TextColor3 = Color3.new(1, 1, 1)
DexExplorerButton.TextSize = 25

DexExplorerButton.MouseButton1Click:Connect(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
end)

ESPPlayersButton.Name = "ESPPlayersButton"
ESPPlayersButton.Parent = ContentFrame
ESPPlayersButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ESPPlayersButton.Position = UDim2.new(0.5, -100, 0.1, -15)
ESPPlayersButton.Size = UDim2.new(0, 200, 0, 30)
ESPPlayersButton.Font = Enum.Font.SourceSansBold
ESPPlayersButton.Text = "Esp Players: OFF"
ESPPlayersButton.TextWrapped = true
ESPPlayersButton.TextColor3 = Color3.new(1, 1, 1)
ESPPlayersButton.TextSize = 25

local LP = Players.LocalPlayer -- Local Player reference
local P = Players -- Players service reference
local DB = false -- Debounce

getgenv().Toggle = false -- Global variable for toggle

-- ESP function
local function toggleESP()
    while task.wait() do
        if not getgenv().Toggle then
            -- If ESP is toggled off, remove all ESP highlights and BillboardGui
            for _, v in pairs(P:GetChildren()) do
                if v:IsA("Player") and v ~= LP and v.Character then
                    local ESP = v.Character:FindFirstChild("Totally NOT Esp")
                    local Icon = v.Character:FindFirstChild("Icon")
                    
                    -- Remove ESP if it exists
                    if ESP then ESP:Destroy() end
                    if Icon then Icon:Destroy() end
                end
            end
            break -- Exit the loop if the ESP is off
        end
        
        if DB then 
            return -- If debounce is active, prevent further execution
        end
        DB = true

        pcall(function()
            for i, v in pairs(P:GetChildren()) do
                if v:IsA("Player") and v ~= LP then
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        local pos = math.floor(((LP.Character.HumanoidRootPart.Position) - (v.Character.HumanoidRootPart.Position)).magnitude)

                        if v.Character:FindFirstChild("Totally NOT Esp") == nil and v.Character:FindFirstChild("Icon") == nil then
                            -- Create ESP
                            local ESP = Instance.new("Highlight", v.Character)
                            ESP.Name = "Totally NOT Esp"
                            ESP.Adornee = v.Character
                            ESP.FillColor = v.TeamColor.Color
                            ESP.FillTransparency = 0.5
                            ESP.OutlineColor = Color3.fromRGB(255, 0, 0)
                            ESP.OutlineTransparency = 0
                            ESP.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop

                            -- Create Text Billboard
                            local Icon = Instance.new("BillboardGui", v.Character)
                            local ESPText = Instance.new("TextLabel")
                            Icon.Name = "Icon"
                            Icon.ExtentsOffset = Vector3.new(0, 1, 0)
                            Icon.AlwaysOnTop = true
                            Icon.Size = UDim2.new(0, 800, 0, 50)
                            
                            ESPText.Name = "ESPText"
                            ESPText.Parent = Icon
                            ESPText.BackgroundTransparency = 1.000
                            ESPText.Size = UDim2.new(0, 800, 0, 50)
                            ESPText.Font = Enum.Font.SciFi
                            ESPText.Text = v.Name.." | Distance: "..pos
                            ESPText.TextColor3 = v.TeamColor.Color
                            ESPText.TextSize = 10.800
                        else
                            -- Update existing ESP text with new distance
                            if v.Character:FindFirstChild("Icon") then
                                v.Character:FindFirstChild("Icon").ESPText.Text = v.Name.." | Distance: "..pos
                            end
                        end
                    end
                end
            end
        end)
        
        wait(0.1) -- Throttle loop to prevent overloading
        DB = false
    end
end

-- Button click event to toggle ESP on and off
ESPPlayersButton.MouseButton1Click:Connect(function()
    getgenv().Toggle = not getgenv().Toggle -- Toggle the ESP on/off
    
    if getgenv().Toggle then
        ESPPlayersButton.Text = "Esp Players: ON"
        toggleESP() -- Start the ESP loop
    else
        ESPPlayersButton.Text = "Esp Players: OFF"
        toggleESP() -- Call again to remove ESP objects
    end
end)

RemoveLasersButton.Name = "RemoveLasersButton"
RemoveLasersButton.Parent = OtherFrame
RemoveLasersButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
RemoveLasersButton.Position = UDim2.new(0.5, -100, 0.5, -15)
RemoveLasersButton.Size = UDim2.new(0, 200, 0, 30)
RemoveLasersButton.Font = Enum.Font.SourceSansBold
RemoveLasersButton.Text = "Clear Lasers [Training Maze]"
RemoveLasersButton.TextWrapped = true
RemoveLasersButton.TextColor3 = Color3.new(1, 1, 1)
RemoveLasersButton.TextSize = 18

-- Function to delete the laser doors
local function deleteLaserDoors()
    local mapsFolder = game.Workspace:FindFirstChild("Maps")
    
    if mapsFolder then
        -- Find the folder "NoAttackThrough" inside "Maps"
        local noAttackThroughFolder = mapsFolder:FindFirstChild("NoAttackThrough")
        
        if noAttackThroughFolder then
            -- Find the folder "TrainingMaze" inside "NoAttackThrough"
            local trainingMazeFolder = noAttackThroughFolder:FindFirstChild("TrainingMaze")
            
            if trainingMazeFolder then
                -- Loop through all children of "TrainingMaze"
                for _, child in ipairs(trainingMazeFolder:GetChildren()) do
                    -- Check if the child is a model named "AntiSpawnCampLaser"
                    if child:IsA("Model") and child.Name == "AntiSpawnCampLaser" then
                        -- Destroy the entire model
                        child:Destroy()
                    end
                end
            end
        end
    end
end
-- Button click event to remove the laser doors
RemoveLasersButton.MouseButton1Click:Connect(function()
    deleteLaserDoors()
end)



AutofarmCustardsButton.Name = "AutofarmCustardsButton"
AutofarmCustardsButton.Parent = ContentFrame
AutofarmCustardsButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AutofarmCustardsButton.Position = UDim2.new(0.5, -100, 0.3, -15)
AutofarmCustardsButton.Size = UDim2.new(0, 200, 0, 30)
AutofarmCustardsButton.Font = Enum.Font.SourceSansBold
AutofarmCustardsButton.Text = "Autofarm Custards: OFF"
AutofarmCustardsButton.TextWrapped = true
AutofarmCustardsButton.TextColor3 = Color3.new(1, 1, 1)
AutofarmCustardsButton.TextSize = 20
local autofarmEnabled = false

local function autofarmCustards()
    while autofarmEnabled do
        -- First, send the character spawn request
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local args = {
            [1] = "Player",
            [2] = "CustardFacility"
        }
        game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

        -- Wait for 3 seconds
        wait(3)

        -- After 3 seconds, move each custard part to the player's position
        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = game:GetService("RunService").RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 0.7 seconds before moving to the next part
                wait(0.5)
            end
        end

        -- Continuously check if the player is in the "Idle" team
        if LocalPlayer.Team and LocalPlayer.Team.Name == "Idle" then
            -- Wait for 5 seconds before restarting the loop
            wait(5)
        end
    end
end

AutofarmCustardsButton.MouseButton1Click:Connect(function()
    autofarmEnabled = not autofarmEnabled
    if autofarmEnabled then
        AutofarmCustardsButton.Text = "Autofarm Custards: ON"
        spawn(autofarmCustards)
    else
        AutofarmCustardsButton.Text = "Autofarm Custards: OFF"
    end
end)

CustardEspButton.Name = "CustardEspButton"
CustardEspButton.Parent = ContentFrame
CustardEspButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
CustardEspButton.Position = UDim2.new(0.5, -100, 0.5, -15)
CustardEspButton.Size = UDim2.new(0, 200, 0, 30)
CustardEspButton.Font = Enum.Font.SourceSansBold
CustardEspButton.Text = "ESP Custards: OFF"
CustardEspButton.TextColor3 = Color3.new(1, 1, 1)
CustardEspButton.TextSize = 25

local espActive = false
local espToggleKey = Enum.KeyCode.E
local espColor = Color3.fromRGB(7, 43, 244)
local glowColor = Color3.fromRGB(234, 5, 255)

CustardEspButton.MouseButton1Click:Connect(function()
    espActive = not espActive
    CustardEspButton.Text = espActive and "ESP Custards: ON" or "ESP Custards: OFF"
    spawn(function()
        while espActive do
            wait(1)
            for _, custard in ipairs(workspace.game.gameCustard:GetChildren()) do
                if not custard:FindFirstChild("hax1") then
                    local highlight = Instance.new("Highlight")
                    highlight.OutlineTransparency = 1
                    highlight.FillTransparency = 0.2
                    highlight.FillColor = espColor
                    highlight.Name = "hax1"
                    highlight.Adornee = custard
                    highlight.Parent = custard

                    local pointLight = Instance.new("PointLight")
                    pointLight.Color = glowColor
                    pointLight.Brightness = 10
                    pointLight.Range = 5.5
                    pointLight.Name = "hax2"
                    pointLight.Parent = custard
                end
            end
        end
        if not espActive then
            for _, custard in ipairs(workspace.game.gameCustard:GetChildren()) do
                if custard:FindFirstChild("hax1") then
                    custard.hax1:Destroy()
                end
                if custard:FindFirstChild("hax2") then
                    custard.hax2:Destroy()
                end
            end
        end
    end)
end)

BeatAllMapsButton.Name = "BeatAllMapsButton"
BeatAllMapsButton.Parent = ContentFrame
BeatAllMapsButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
BeatAllMapsButton.Position = UDim2.new(0.5, -100, 0.7, -15)
BeatAllMapsButton.Size = UDim2.new(0, 200, 0, 30)
BeatAllMapsButton.Font = Enum.Font.SourceSansBold
BeatAllMapsButton.Text = "Complete All Maps"
BeatAllMapsButton.TextWrapped = true
BeatAllMapsButton.TextColor3 = Color3.new(1, 1, 1)
BeatAllMapsButton.TextSize = 25

BeatAllMapsButton.MouseButton1Click:Connect(function()
local args = {
    [1] = "Player",
    [2] = "TeletubbyLand"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end

        -- Optional: Delay before restarting the loop
        wait(10)

local args = {
    [1] = "Player",
    [2] = "SecretLair"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end

        -- Optional: Delay before restarting the loop
        wait(10)

local args = {
    [1] = "Player",
    [2] = "CustardFacility"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end

        -- Optional: Delay before restarting the loop
        wait(10)

local args = {
    [1] = "Player",
    [2] = "Outskirts"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end

        -- Optional: Delay before restarting the loop
        wait(10)

local args = {
    [1] = "Player",
    [2] = "TrainingMaze"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end

        -- Optional: Delay before restarting the loop
        wait(10)

local args = {
    [1] = "Player",
    [2] = "Mountains"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

        local custardParts = {
            "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "c10",
            "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c19", "c20"
        }
        
        -- Loop through each custard part
        for _, partName in ipairs(custardParts) do
            local part = workspace:FindFirstChild(partName, true)
            if part and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                
                local connection
                local startTime = tick()
                connection = RunService.RenderStepped:Connect(function()
                    if tick() - startTime < 1 and part then
                        -- Generate a random offset for shaking
                        local randomX = math.random(-3, 3) / 10 -- Adjust magnitude as needed
                        local randomY = math.random(-3, 3) / 10
                        local randomZ = math.random(-3, 3) / 10
                        
                        -- Update the part's position to shake around the humanoid
                        part.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * CFrame.new(randomX, randomY, randomZ)
                    else
                        connection:Disconnect()
                    end
                end)

                -- Wait for 1 second before moving to the next part
                wait(0.7)
            end
        end
end)

EscapeTrainingMazeButton.Name = "EscapeTrainingMazeButton"
EscapeTrainingMazeButton.Parent = OtherFrame
EscapeTrainingMazeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
EscapeTrainingMazeButton.Position = UDim2.new(0.5, -100, 0.7, -15)
EscapeTrainingMazeButton.Size = UDim2.new(0, 200, 0, 30)
EscapeTrainingMazeButton.Font = Enum.Font.SourceSansBold
EscapeTrainingMazeButton.Text = "Escape Training Maze"
EscapeTrainingMazeButton.TextWrapped = true
EscapeTrainingMazeButton.TextColor3 = Color3.new(1, 1, 1)
EscapeTrainingMazeButton.TextSize = 25

EscapeTrainingMazeButton.MouseButton1Click:Connect(function()
local args = {
    [1] = "Player",
    [2] = "TrainingMaze"
}

game:GetService("ReplicatedStorage").sendCharacterSpawnRequest:FireServer(unpack(args))

wait(4)

local args = {
    [1] = game:GetService("Players").LocalPlayer
}

game:GetService("ReplicatedStorage").mazeWonEvent:FireServer(unpack(args))
end)

CreditsFrame.Name = "CreditsFrame"
CreditsFrame.Parent = MainFrame
CreditsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
CreditsFrame.Position = UDim2.new(0, 100, 0, 30)
CreditsFrame.Size = UDim2.new(1, -100, 1, -30)
CreditsFrame.Visible = false

HalloweenFrame.Name = "HalloweenFrame"
HalloweenFrame.Parent = MainFrame
HalloweenFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
HalloweenFrame.Position = UDim2.new(0, 100, 0, 30)
HalloweenFrame.Size = UDim2.new(1, -100, 1, -30)
HalloweenFrame.Visible = false

OtherFrame.Name = "OtherFrame"
OtherFrame.Parent = MainFrame
OtherFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
OtherFrame.Position = UDim2.new(0, 100, 0, 30)
OtherFrame.Size = UDim2.new(1, -100, 1, -30)
OtherFrame.Visible = false

MiscFrame.Name = "MiscFrame"
MiscFrame.Parent = MainFrame
MiscFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MiscFrame.Position = UDim2.new(0, 100, 0, 30)
MiscFrame.Size = UDim2.new(1, -100, 1, -30)
MiscFrame.Visible = false

CreditsLabel.Name = "CreditsLabel"
CreditsLabel.Parent = CreditsFrame
CreditsLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
CreditsLabel.Position = UDim2.new(0.5, -100, 0.3, -15)
CreditsLabel.Size = UDim2.new(0, 200, 0, 30)
CreditsLabel.Font = Enum.Font.SourceSansBold
CreditsLabel.Text = "Created by Ocfi,\n Join My Discord"
CreditsLabel.TextColor3 = Color3.new(1, 1, 1)
CreditsLabel.TextSize = 18

CopyDiscordLinkButton.Name = "CopyDiscordLinkButton"
CopyDiscordLinkButton.Parent = CreditsFrame
CopyDiscordLinkButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
CopyDiscordLinkButton.Position = UDim2.new(0.5, -100, 0.7, -15)
CopyDiscordLinkButton.Size = UDim2.new(0, 200, 0, 30)
CopyDiscordLinkButton.Font = Enum.Font.SourceSansBold
CopyDiscordLinkButton.Text = "Copy Discord Invite"
CopyDiscordLinkButton.TextColor3 = Color3.new(1, 1, 1)
CopyDiscordLinkButton.TextSize = 20

CopyDiscordLinkButton.MouseButton1Click:Connect(function()
    setclipboard("https://discord.gg/EhDUagAhCE")
    game.StarterGui:SetCore("SendNotification", {
        Title = "Discord Link";
        Text = "Copied to clipboard!";
        Duration = 5;
    })
end)


-- Track currently active tab
local currentTab = "Main" -- Start with the Main tab
local minimized = false -- Track if minimized

local tabs = { 
    {name = "Main", frame = ContentFrame},
    {name = "Credits", frame = CreditsFrame},
    {name = "Halloween", frame = HalloweenFrame},
    {name = "Other", frame = OtherFrame},
    {name = "Misc", frame = MiscFrame}
}

-- Function to switch tabs
local function switchTab(selectedTabName)
    -- Only switch tabs if not minimized
    if minimized then
        return
    end

    for _, tab in pairs(tabs) do
        tab.frame.Visible = false
    end

    for index, tab in pairs(tabs) do
        if tab.name == selectedTabName then
            tab.frame.Visible = true
            TabIndicator.Position = UDim2.new(0, 0, 0, (index - 1) * 30) 
        end
    end

    -- Update currentTab to track the active tab
    currentTab = selectedTabName
end

-- Toggle minimize button logic
ToggleVisibilityButton.MouseButton1Click:Connect(function()
    minimized = not minimized
    
    if minimized then
        -- Collapse MainFrame's size to just show the TitleBar
        MainFrame.Size = UDim2.new(0, 300, 0, 30)  -- Shrink to the height of the TitleBar
        -- Hide everything inside MainFrame except the TitleBar
        for _, child in pairs(MainFrame:GetChildren()) do
            if child ~= TitleBar then
                child.Visible = false
            end
        end
        ToggleVisibilityButton.Text = "+"
    else
        -- Restore MainFrame's size and show the previously active tab
        MainFrame.Size = UDim2.new(0, 300, 0, 200)  -- Restore original size
        switchTab(currentTab)  -- Restore the previously active tab
        ToggleVisibilityButton.Text = "-"
    end
end)

-- Tab button click connections
AntiSlipperyTab.MouseButton1Click:Connect(function()
    TabIndicator:TweenPosition(UDim2.new(0, 0, 0, 0), "Out", "Sine", 0.2, true)
    switchTab("Main")
end)

CreditsTab.MouseButton1Click:Connect(function()
    TabIndicator:TweenPosition(UDim2.new(0, 0, 0, 30), "Out", "Sine", 0.2, true)
    switchTab("Credits")
end)

HalloweenTab.MouseButton1Click:Connect(function()
    TabIndicator:TweenPosition(UDim2.new(0, 0, 0, 60), "Out", "Sine", 0.2, true)
    switchTab("Halloween")
end)

OtherTab.MouseButton1Click:Connect(function()
    TabIndicator:TweenPosition(UDim2.new(0, 0, 0, 91), "Out", "Sine", 0.2, true)
    switchTab("Other")
end)

MiscTab.MouseButton1Click:Connect(function()
    TabIndicator:TweenPosition(UDim2.new(0, 0, 0, 121), "Out", "Sine", 0.2, true)
    switchTab("Misc")
end)

-- Start with "Main" tab visible
switchTab("Main")

ToggleVisibilityButton.Name = "ToggleVisibilityButton"
ToggleVisibilityButton.Parent = TitleBar
ToggleVisibilityButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
ToggleVisibilityButton.BorderColor3 = Color3.fromRGB(0, 162, 255)
ToggleVisibilityButton.Position = UDim2.new(0, 239, 0, 0)  
ToggleVisibilityButton.Size = UDim2.new(0, 30, 0, 30)
ToggleVisibilityButton.Font = Enum.Font.SourceSansBold
ToggleVisibilityButton.Text = "-"
ToggleVisibilityButton.TextWrapped = true
ToggleVisibilityButton.TextColor3 = Color3.new(1, 1, 1)
ToggleVisibilityButton.TextSize = 20

local minimized = false

ToggleVisibilityButton.MouseButton1Click:Connect(function()
    minimized = not minimized
    
    if minimized then
        -- Collapse MainFrame's size to just show the TitleBar
        MainFrame.Size = UDim2.new(0, 300, 0, 30)  -- Shrink to the height of the TitleBar
        -- Hide everything inside MainFrame except the TitleBar
        for _, child in pairs(MainFrame:GetChildren()) do
            if child ~= TitleBar then
                child.Visible = false
            end
        end
        ToggleVisibilityButton.Text = "+"
    else
        -- Restore MainFrame's size and show all its contents
        MainFrame.Size = UDim2.new(0, 300, 0, 200)  -- Restore original size
        for _, child in pairs(MainFrame:GetChildren()) do
            if child ~= TitleBar then
                child.Visible = true
            end
        end
        ToggleVisibilityButton.Text = "-"
    end
end)
